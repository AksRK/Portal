import Head from 'next/head'
import {FC, useContext, useEffect} from "react";
import {IHomePageProps} from "@/core/types";
import PaddingWrp from "@/components/UI/PaddingWrp";
import {Context} from "@/components/StoreProvider";
import {observer} from "mobx-react-lite";
import PostService from "@/services/post.service";
import CardsList from "@/components/UI/CardsList";
import BlogCategoryService from "@/services/blog-category.service";

const Home:FC<IHomePageProps> = ({postsWithPagination, categories}) => {
    const {store} = useContext(Context)
    useEffect(() => {
        store.categoriesStore.saveCategories(categories)
        store.postStore.savePostsWithPagination(postsWithPagination);
    }, [postsWithPagination, categories]);

    const loadMore = async () => {
        if (store.postStore.postsWithPagination.nextPage) {
            await store.postStore.loadPostsWithPagination({page:store.postStore.postsWithPagination.nextPage})
        }
    }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
          <div style={{minHeight:'1000px'}}>
              <PaddingWrp size={'small'}>
                  <CardsList
                      withTag={true}
                      data={{posts:store.postStore.postsWithPagination.docs}}
                      loadMore={store.postStore.postsWithPagination.hasNextPage}
                      isLoading={store.postStore.isLoading}
                      onLoadMore={loadMore}/>
              </PaddingWrp>
          </div>
      </main>
    </>
  )
}

export default observer(Home);

export async function getServerSideProps() {
    const [categories, postsResponse] = await Promise.all([
        BlogCategoryService.getALl({fromServer:true}).then((r)=> r.data),
        PostService.getALl({fromServer: true}).then((r)=> r.data)
    ])
    return {
        props: {categories: categories, postsWithPagination: postsResponse}
    }
}
